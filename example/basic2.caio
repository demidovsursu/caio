%option case-insensitive locations
%operator <yfx> '+' '-'
%operator <yfx> '*' '/' 
%operator <fy> '-'
%type <int> ?number? ?ident?
%type <char> '+' '-' '*' '/'
%type <Statement> stmt
%type <Expr> expr
%{
#include <string>
#include <iostream>
#include <map>
#include <cctype>
using namespace std;
int find_id(string name);
}
%% // rules for lexer
[ \t\r] 				; // skip spaces
\d+ 					?number?  <stoi(yytext)>
[a-zA-Z]\w*				?ident?  <find_id(yytext)>
%% // rules for parser
program = stmts 			<$stmts>
 		  ;
stmts = { stmt '\n' }
	;
stmt = 					
  | ?ident? '=' expr 			<assign($[?ident?],$expr)>
  | "input" ?ident?  			<input($[?ident?])>
  | "print" expr  			<print($expr)> 
  | "while" expr '\n' stmts "wend" 	<whilestmt($expr,$stmts)> 	
  | "if" expr ["then"] '\n'  stmts
     else.stmts:[ "else" '\n' stmts ]
     "end" "if" 			<ifstmt($expr,$stmts,$[else.stmts])> 	
  ;
expr = x:expr op:('+'|'-'|'*'|'/') y:expr	<op2($op,$x,$y)>
    | '-' x:expr 			<op2('-',number(0),$x)>
    | '(' expr ')' 
    | ?number? 				<number($[?number?])>
    | ?ident?				<ident($[?ident?])>
    ;
%%
int mem[1000]; // memory for data
int eval(Expr e)
{ match e {
  rule op2(op,x,y):
     switch(op)
     { case '+': return eval(x)+eval(y);
       case '-': return eval(x)-eval(y);
       case '*': return eval(x)*eval(y);
       case '/': return eval(x)/eval(y);
     }
  rule number(x):  return x;
  rule ident(x): return mem[x];
  }
}
void yyinterpret(List<Statement> p) // execute statements
{ for(auto s:p)
    match s {
      rule assign(v, e): mem[v]=eval(e);
      rule input(v): cin>>mem[v];
      rule print(e): cout<<eval(e)<<endl;
      rule whilestmt(e,p1): while(eval(e)) yyinterpret(p1);
      rule ifstmt(e,p1,p2): if(eval(e)) yyinterpret(p1);
                            else yyinterpret(p2);
    }
}
map<string,int> ti; // table of identifiers
int find_id(string name) // find a identifier
{ for(auto &ch:name) ch=toupper(ch);
  int k=ti[name];
  if(k==0) k=ti[name]=ti.size();
  return k;
}
